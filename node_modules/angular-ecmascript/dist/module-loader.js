'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _moduleHelpers = require('./module-helpers');

var Helpers = _interopRequireWildcard(_moduleHelpers);

var _utils = require('./utils');

var Utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Loader = function () {
  function Loader(ngModule, dependencies) {
    _classCallCheck(this, Loader);

    if (Utils.isString(ngModule)) {
      ngModule = _angular2.default.module(ngModule, dependencies);
    }

    this.module = ngModule;
  }

  _createClass(Loader, [{
    key: 'load',
    value: function load(Helper) {
      var _this = this;

      if (Utils.isFunction(Helper)) {
        var proto = Helper.prototype;
        Helper.$name = Helper.$name || Helper.name;
        Helper.$inject = Helper.$inject || [];

        if (proto instanceof Helpers.Provider) this.loadProvider(Helper);else if (proto instanceof Helpers.Service) this.loadService(Helper);else if (proto instanceof Helpers.Controller) this.loadController(Helper);else if (proto instanceof Helpers.Directive) this.loadDirective(Helper);else if (proto instanceof Helpers.Decorator) this.loadDecorator(Helper);else if (proto instanceof Helpers.Factory) this.loadFactory(Helper);else if (proto instanceof Helpers.Filter) this.loadFilter(Helper);else if (proto instanceof Helpers.Config) this.loadConfig(Helper);else if (proto instanceof Helpers.Runner) this.loadRunner(Helper);else throw Error('can\'t load unknown module-helper');
      } else if (Utils.isArray(Helper)) {
        Helper.forEach(function (Helper) {
          return _this.load(Helper);
        });
      } else if (Utils.isString(Helper)) {
        var _module;

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        (_module = this.module)[Helper].apply(_module, args);
      } else {
        throw Error('`Helper` must be a function or a string');
      }

      return this;
    }
  }, {
    key: 'loadProvider',
    value: function loadProvider(Provider) {
      this.module.provider(Provider.$name, Provider);
    }
  }, {
    key: 'loadService',
    value: function loadService(Service) {
      this.module.service(Service.$name, Service);
    }
  }, {
    key: 'loadController',
    value: function loadController(Controller) {
      var $inject = Controller.$inject;

      if (!Utils.hasValue($inject, '$scope')) {
        $inject.unshift('$scope');
      }

      this.module.controller(Controller.$name, Controller);
    }
  }, {
    key: 'loadDirective',
    value: function loadDirective(Directive) {
      var helper = function helper() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return new (Function.prototype.bind.apply(Directive, [null].concat(args)))();
      };

      helper.$inject = Directive.$inject;
      this.module.directive(Directive.$name, helper);
    }
  }, {
    key: 'loadDecorator',
    value: function loadDecorator(Decorator) {
      var decorator = void 0;
      var $inject = Decorator.$inject;

      var helper = function helper() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        decorator = new (Function.prototype.bind.apply(Decorator, [null].concat(args)))();
        return decorate;
      };

      var decorate = function decorate() {
        var _decorator;

        (_decorator = decorator).decorate.apply(_decorator, arguments);
        return decorator.$delegate;
      };

      if (!Utils.hasValue($inject, '$delegate')) {
        $inject.unshift('$delegate');
      }

      this.module.decorator(Decorator.$name, helper);
    }
  }, {
    key: 'loadFactory',
    value: function loadFactory(Factory) {
      var helper = function helper() {
        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        var factory = new (Function.prototype.bind.apply(Factory, [null].concat(args)))();
        return factory.create.bind(factory);
      };

      helper.$inject = Factory.$inject;
      this.module.factory(Factory.$name, helper);
    }
  }, {
    key: 'loadFilter',
    value: function loadFilter(Filter) {
      var helper = function helper() {
        for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }

        var filter = new (Function.prototype.bind.apply(Filter, [null].concat(args)))();
        return filter.filter.bind(filter);
      };

      helper.$inject = Filter.$inject;
      this.module.filter(Filter.$name, helper);
    }
  }, {
    key: 'loadConfig',
    value: function loadConfig(Config) {
      var helper = function helper() {
        for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }

        var config = new (Function.prototype.bind.apply(Config, [null].concat(args)))();
        return config.configure();
      };

      helper.$inject = Config.$inject;
      this.module.config(helper);
    }
  }, {
    key: 'loadRunner',
    value: function loadRunner(Runner) {
      var helper = function helper() {
        for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          args[_key7] = arguments[_key7];
        }

        var runner = new (Function.prototype.bind.apply(Runner, [null].concat(args)))();
        return runner.run();
      };

      helper.$inject = Runner.$inject;
      this.module.run(helper);
    }
  }]);

  return Loader;
}();

exports.default = Loader;
//# sourceMappingURL=module-loader.js.map